/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece651.rl235;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;


import org.junit.jupiter.api.parallel.Resources;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.ResourceAccessMode;

import java.io.InputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringReader;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


class AppTest {
  /*
    @Test
    void test_read_placement() throws IOException{
      
      StringReader sr = new StringReader("B2V\nC8H\na4v\n");
      
      ByteArrayOutputStream bytes = new ByteArrayOutputStream();

      PrintStream ps = new PrintStream(bytes, true);//write printstream into bytes

      Board<Character> b = new BattleShipBoard<Character>(10, 20);

      App app = new App(b, sr, ps);//read from stringreader and writes to printstream

      String prompt = "Please enter a location for a ship:";

      Placement[] expected = new Placement[3];

      expected[0] = new Placement(new Coordinate(1, 2), 'V');

      expected[1] = new Placement(new Coordinate(2, 8), 'H');

      expected[2] = new Placement(new Coordinate(0, 4), 'V');

      for (int i = 0; i < expected.length; i++){

        Placement p = app.readPlacement(prompt);

        assertEquals(p, expected[i]);

        assertEquals(prompt + "\n", bytes.toString());

        bytes.reset();
        
      }
      
    }
  
  
  @Test
  void test_do_one_placement() throws IOException{

      StringReader sr1 = new StringReader("A0v\n");
        
      ByteArrayOutputStream bytes = new ByteArrayOutputStream();

      PrintStream ps = new PrintStream(bytes, true);//write printstream into bytes

      //Board<Character> b = new BattleShipBoard<Character>(3, 2);

      Board<Character> b1 = new BattleShipBoard<Character>(3, 3);

      //Board<Character> b2 = new BattleShipBoard<Character>(3, 2);

      App app1 = new App(b1, sr1, ps);//read from stringreader and writes to printstream

      //App app2 = new App(b2, sr1, ps);

      String prompt = "Where would you like to put your ship?";

      app1.doOnePlacement();


      //assertEquals('s', b.whatIsAt(new Coordinate("A0")));

      assertEquals('d', b1.whatIsAt(new Coordinate("A0")));

      assertEquals(null, b1.whatIsAt(new Coordinate("A1")));

      assertEquals(null, b1.whatIsAt(new Coordinate("A2")));

       assertEquals('d', b1.whatIsAt(new Coordinate("B0")));

       assertEquals('d', b1.whatIsAt(new Coordinate("C0")));
      bytes.reset();

      

      StringReader sr2 = new StringReader("A0v\n");

      // ByteArrayOutputStream bytes = new ByteArrayOutputStream();

      //PrintStream ps = new PrintStream(bytes, true);//write printstream into bytes

      Board<Character> b2 = new BattleShipBoard<Character>(3, 2);

       App app2 = new App(b2, sr2, ps);
      
      app2.doOnePlacement();

      assertEquals(null, b2.whatIsAt(new Coordinate("A0")));

      assertEquals(null, b2.whatIsAt(new Coordinate("A1")));

      assertEquals(null, b2.whatIsAt(new Coordinate("A2")));

       assertEquals(null, b2.whatIsAt(new Coordinate("B0")));      
      
    
  }

  */
  
  
  //@Disabled
  @Test
  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  void test_main() throws IOException {

    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    InputStream input = getClass().getClassLoader().getResourceAsStream("input.txt");
    assertNotNull(input);

    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream("output.txt");

    assertNotNull(expectedStream);
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;

    try {
      System.setIn(input);
      System.setOut(out);
      App.main(new String[0]);//where it's run
    }
    finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }

    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    assertEquals(expected, actual);
    
  }
  
  

}

